/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/pointcloud/qgspointcloudlayerelevationproperties.h          *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/





class QgsPointCloudLayerElevationProperties : QgsMapLayerElevationProperties
{
%Docstring(signature="appended")
Point cloud layer specific subclass of :py:class:`QgsMapLayerElevationProperties`.

.. versionadded:: 3.18
%End

%TypeHeaderCode
#include "qgspointcloudlayerelevationproperties.h"
%End
  public:

    QgsPointCloudLayerElevationProperties( QObject *parent /TransferThis/ );
%Docstring
Constructor for QgsPointCloudLayerElevationProperties, with the specified ``parent`` object.
%End

    virtual bool hasElevation() const;

    virtual QDomElement writeXml( QDomElement &element, QDomDocument &doc, const QgsReadWriteContext &context );

    virtual bool readXml( const QDomElement &element, const QgsReadWriteContext &context );

    virtual bool isVisibleInZRange( const QgsDoubleRange &range ) const;

    virtual QgsDoubleRange calculateZRange( QgsMapLayer *layer ) const;


    double zOffset() const;
%Docstring
Returns the z offset, which is a fixed offset amount which should be added to z values from
the layer.

This can be used to correct or manually adjust for incorrect elevation values in a point cloud layer.

.. note::

   Any scaling specified via :py:func:`~QgsPointCloudLayerElevationProperties.zScale` is applied before any offset value specified via :py:func:`~QgsPointCloudLayerElevationProperties.zOffset`

.. seealso:: :py:func:`setZOffset`
%End

    void setZOffset( double offset );
%Docstring
Sets the z ``offset``, which is a fixed offset amount which will be added to z values from
the layer.

This can be used to correct or manually adjust for incorrect elevation values in a point cloud layer.

.. note::

   Any scaling specified via :py:func:`~QgsPointCloudLayerElevationProperties.zScale` is applied before any offset value specified via :py:func:`~QgsPointCloudLayerElevationProperties.zOffset`

.. seealso:: :py:func:`zOffset`
%End

    double zScale() const;
%Docstring
Returns the z scale, which is a scaling factor which should be applied to z values from
the layer.

This can be used to correct or manually adjust for incorrect elevation values in a point cloud layer, such
as conversion of elevation values in feet to meters.

.. note::

   Any scaling specified via :py:func:`~QgsPointCloudLayerElevationProperties.zScale` is applied before any offset value specified via :py:func:`~QgsPointCloudLayerElevationProperties.zOffset`

.. seealso:: :py:func:`setZScale`
%End

    void setZScale( double scale );
%Docstring
Sets the z ``scale``, which is a scaling factor which will be applied to z values from
the layer.

This can be used to correct or manually adjust for incorrect elevation values in a point cloud layer, such
as conversion of elevation values in feet to meters.

.. note::

   Any scaling specified via :py:func:`~QgsPointCloudLayerElevationProperties.zScale` is applied before any offset value specified via :py:func:`~QgsPointCloudLayerElevationProperties.zOffset`

.. seealso:: :py:func:`zScale`
%End

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/pointcloud/qgspointcloudlayerelevationproperties.h          *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
