/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/textrenderer/qgstextcharacterformat.h                       *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/





class QgsTextCharacterFormat
{
%Docstring(signature="appended")
Stores information relating to individual character formatting.

These options encapsulate formatting options which override the default
settings from a :py:class:`QgsTextFormat` for individual characters (or sets of characters).

.. warning::

   This API is not considered stable and may change in future QGIS versions.

.. versionadded:: 3.14
%End

%TypeHeaderCode
#include "qgstextcharacterformat.h"
%End
  public:

    QgsTextCharacterFormat();
%Docstring
Constructor for QgsTextCharacterFormat.
%End

    QgsTextCharacterFormat( const QTextCharFormat &format );
%Docstring
Constructor for QgsTextCharacterFormat, based on the specified QTextCharFormat ``format``.
%End

    enum class BooleanValue
    {
      NotSet,
      SetTrue,
      SetFalse,
    };

    QColor textColor() const;
%Docstring
Returns the character's text color, or an invalid color if no color override
is set and the default format color should be used.

.. seealso:: :py:func:`setTextColor`
%End

    void setTextColor( const QColor &textColor );
%Docstring
Sets the character's text ``color``.

Set ``color`` to an invalid color if no color override
is desired and the default format color should be used.

.. seealso:: :py:func:`textColor`
%End


    BooleanValue strikeOut() const;
%Docstring
Returns whether the format has strikethrough enabled.

.. seealso:: :py:func:`setStrikeOut`
%End

    void setStrikeOut( BooleanValue enabled );
%Docstring
Sets whether the format has strikethrough ``enabled``.

.. seealso:: :py:func:`strikeOut`
%End

    BooleanValue underline() const;
%Docstring
Returns whether the format has underline enabled.

.. seealso:: :py:func:`setUnderline`
%End

    void setUnderline( BooleanValue enabled );
%Docstring
Sets whether the format has underline ``enabled``.

.. seealso:: :py:func:`underline`
%End

    BooleanValue overline() const;
%Docstring
Returns whether the format has overline enabled.

.. seealso:: :py:func:`setUnderline`
%End

    void setOverline( BooleanValue enabled );
%Docstring
Sets whether the format has overline ``enabled``.

.. seealso:: :py:func:`overline`
%End

    void updateFontForFormat( QFont &font, double scaleFactor = 1.0 ) const;
%Docstring
Updates the specified ``font`` in place, applying character formatting options which
are applicable on a font level.

The optional ``scaleFactor`` parameter can specify a font size scaling factor. It is recommended to set this to
:py:class:`QgsTextRenderer`.FONT_WORKAROUND_SCALE and then manually calculations
based on the resultant font metrics. Failure to do so will result in poor quality text rendering
at small font sizes.
%End

};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/textrenderer/qgstextcharacterformat.h                       *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
