#line 1 "/Volumes/Data/work/projects/desktop/qgis3/src/core/flex_qgsexpressionlexer.cpp"

#line 3 "/Volumes/Data/work/projects/desktop/qgis3/src/core/flex_qgsexpressionlexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define exp__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer exp__create_buffer
#endif

#ifdef yy_delete_buffer
#define exp__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer exp__delete_buffer
#endif

#ifdef yy_scan_buffer
#define exp__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer exp__scan_buffer
#endif

#ifdef yy_scan_string
#define exp__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string exp__scan_string
#endif

#ifdef yy_scan_bytes
#define exp__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes exp__scan_bytes
#endif

#ifdef yy_init_buffer
#define exp__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer exp__init_buffer
#endif

#ifdef yy_flush_buffer
#define exp__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer exp__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define exp__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state exp__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define exp__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer exp__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define exp_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state exp_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define exp_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state exp_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define exp_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack exp_ensure_buffer_stack
#endif

#ifdef yylex
#define exp_lex_ALREADY_DEFINED
#else
#define yylex exp_lex
#endif

#ifdef yyrestart
#define exp_restart_ALREADY_DEFINED
#else
#define yyrestart exp_restart
#endif

#ifdef yylex_init
#define exp_lex_init_ALREADY_DEFINED
#else
#define yylex_init exp_lex_init
#endif

#ifdef yylex_init_extra
#define exp_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra exp_lex_init_extra
#endif

#ifdef yylex_destroy
#define exp_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy exp_lex_destroy
#endif

#ifdef yyget_debug
#define exp_get_debug_ALREADY_DEFINED
#else
#define yyget_debug exp_get_debug
#endif

#ifdef yyset_debug
#define exp_set_debug_ALREADY_DEFINED
#else
#define yyset_debug exp_set_debug
#endif

#ifdef yyget_extra
#define exp_get_extra_ALREADY_DEFINED
#else
#define yyget_extra exp_get_extra
#endif

#ifdef yyset_extra
#define exp_set_extra_ALREADY_DEFINED
#else
#define yyset_extra exp_set_extra
#endif

#ifdef yyget_in
#define exp_get_in_ALREADY_DEFINED
#else
#define yyget_in exp_get_in
#endif

#ifdef yyset_in
#define exp_set_in_ALREADY_DEFINED
#else
#define yyset_in exp_set_in
#endif

#ifdef yyget_out
#define exp_get_out_ALREADY_DEFINED
#else
#define yyget_out exp_get_out
#endif

#ifdef yyset_out
#define exp_set_out_ALREADY_DEFINED
#else
#define yyset_out exp_set_out
#endif

#ifdef yyget_leng
#define exp_get_leng_ALREADY_DEFINED
#else
#define yyget_leng exp_get_leng
#endif

#ifdef yyget_text
#define exp_get_text_ALREADY_DEFINED
#else
#define yyget_text exp_get_text
#endif

#ifdef yyget_lineno
#define exp_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno exp_get_lineno
#endif

#ifdef yyset_lineno
#define exp_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno exp_set_lineno
#endif

#ifdef yyget_column
#define exp_get_column_ALREADY_DEFINED
#else
#define yyget_column exp_get_column
#endif

#ifdef yyset_column
#define exp_set_column_ALREADY_DEFINED
#else
#define yyset_column exp_set_column
#endif

#ifdef yywrap
#define exp_wrap_ALREADY_DEFINED
#else
#define yywrap exp_wrap
#endif

#ifdef yyget_lval
#define exp_get_lval_ALREADY_DEFINED
#else
#define yyget_lval exp_get_lval
#endif

#ifdef yyset_lval
#define exp_set_lval_ALREADY_DEFINED
#else
#define yyset_lval exp_set_lval
#endif

#ifdef yyget_lloc
#define exp_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc exp_get_lloc
#endif

#ifdef yyset_lloc
#define exp_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc exp_set_lloc
#endif

#ifdef yyalloc
#define exp_alloc_ALREADY_DEFINED
#else
#define yyalloc exp_alloc
#endif

#ifdef yyrealloc
#define exp_realloc_ALREADY_DEFINED
#else
#define yyrealloc exp_realloc
#endif

#ifdef yyfree
#define exp_free_ALREADY_DEFINED
#else
#define yyfree exp_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, yy_size_t len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define exp_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 53
#define YY_END_OF_BUFFER 54
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[258] =
    {   0,
        0,    0,    0,    0,   54,   52,   50,   50,   52,   52,
       52,   29,   52,   38,   26,   24,   39,   25,   52,   28,
       41,   14,    9,   15,   52,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   30,   52,   16,    3,
        3,    5,    3,    3,    3,    3,    3,    3,    4,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,   50,   10,    0,   49,   46,   46,    0,
       43,    0,   51,   40,    1,   27,    0,   41,    0,   11,
       13,   12,   47,    0,   48,    0,   48,   48,    0,   40,

       48,   48,   48,   48,   31,   21,   48,   48,   48,    8,
       48,   48,   48,   23,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    2,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,   46,   46,   46,   51,
       51,    0,   40,   47,   45,    7,   48,   48,   37,   48,
       48,    0,   48,    6,   48,   48,   48,   48,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

       44,    0,   40,   45,   33,   36,   48,   48,    0,   17,
        0,   32,   35,   42,   34,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
       42,   19,    0,    0,    0,    3,    3,    3,    3,    3,
       22,    0,    0,    3,    3,    3,    0,    0,    3,    3,
        0,   18,    3,    3,   20,    3,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    7,    8,    1,    9,   10,
       10,   11,   12,   13,   14,   15,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,    1,   19,
       20,   21,    1,   22,   23,   24,   25,   26,   27,   28,
       24,   29,   30,   24,   31,   32,   24,   33,   34,   24,
       24,   35,   36,   37,   38,   24,   39,   40,   40,   24,
       10,   41,   10,   42,   43,    1,   44,   24,   45,   46,

       47,   48,   24,   49,   50,   24,   51,   52,   24,   53,
       54,   24,   24,   55,   56,   57,   58,   24,   59,   40,
       40,   24,    1,   60,    1,   61,    1,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62
    } ;

static const YY_CHAR yy_meta[63] =
    {   0,
        1,    2,    3,    2,    1,    1,    1,    1,    1,    1,
        4,    1,    1,    1,    1,    1,    5,    2,    1,    1,
        1,    1,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        1,    1,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    1,
        1,    6
    } ;

static const flex_int16_t yy_base[272] =
    {   0,
        0,    0,   62,    0,  692, 1185,  123,  126,  666,  676,
      637, 1185,  122, 1185, 1185, 1185, 1185,  662,  642,  121,
      118,  118, 1185,  604,    0,  138,  144,  149,  192,  155,
      165,  172,  182,  211,  224,  229, 1185,  555, 1185,    0,
      166,  185,  587,  232,  279,    0,  339,    0,  558,    0,
        0,  551,  540,  515,  222,  123,    0,  509,  380,  442,
      101,  218,  493,  320,  313,  222,  318,  215,  479,  325,
        0,  467,    0,  261, 1185,  514,  507,    0,  137,  338,
      444,  388,  146,  489, 1185, 1185,  366,  494,  191, 1185,
     1185, 1185,    0,  357,  515,  348,  535,  540,  350,  545,

      548,  552,  565,  569,  587,  590,  598,  607,  610,  618,
      628,  635,  654, 1185,    0,  520,    0,  271,  349,  701,
      762,  577,  335,  208, 1185,  359,  513,    0,  273,  618,
      565,    0,    0,    0,  823,  648,  159,  247,  601,  570,
      240,  542,  607,  615,  637,  641,  201,  693,  647,  691,
      697,  223,  685,  646,  698,    0,    0,  320,  541,  257,
     1185,  671,  213,    0,  731,  737,  793,  844,  755,  798,
      848,  854,  871,  789,  874,  878,  898,  891,  765,  885,
      180,  749,    0,  798,  190,  945,  815,  482,  870,  886,
      634,  879,  837,  966,  887,  969,  942,  694,  929,  703,

        0,  166,  149,  857,  975,  986,  994, 1005,  745, 1011,
     1024, 1031, 1035, 1041, 1044,  957,  147,  144,  934,  761,
      816,  983, 1024,  851,  877, 1061,  888,  950,  958,  987,
     1064, 1081, 1013, 1023, 1028, 1027, 1028, 1032, 1040, 1056,
     1185, 1057, 1057,    0, 1060, 1063, 1064, 1069, 1066, 1071,
     1073, 1185, 1074,    0, 1185,    0, 1185, 1121,  149, 1127,
      130, 1132, 1138, 1144, 1150, 1152, 1158, 1160, 1166, 1172,
     1178
    } ;

static const flex_int16_t yy_def[272] =
    {   0,
      257,    1,  257,    3,  257,  257,  257,  257,  257,  258,
      259,  257,  260,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  261,  262,  262,  262,  262,  262,
       29,  262,  262,  262,  262,  262,  257,  257,  257,  263,
      263,  257,  263,  264,  257,  263,  265,  263,  257,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  257,  257,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
      263,  263,  263,  257,  257,  258,  257,  266,  266,  260,
      257,  260,  267,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  268,  257,  262,  257,  262,  262,  257,  262,

      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  257,  263,  263,  263,  264,  263,  269,
      269,  265,  263,  265,  257,  270,  263,  263,  263,  263,
      263,  263,  263,  263,  271,  263,   60,  263,   60,   60,
      263,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,  263,  266,  266,  266,  267,
      257,  257,  257,  268,  257,  262,  262,  262,  262,  262,
      262,  257,  262,  262,  262,  262,  262,  262,  121,  121,
      121,  270,  263,  263,  263,  271,  263,   60,   60,   60,
       60,   60,   60,  263,   60,   60,   60,   60,   60,   60,

      266,  257,  257,  257,  262,  262,  262,  262,  257,  262,
      257,  262,  262,  262,  262,  121,  263,  263,  263,   60,
       60,   60,   60,  263,   60,  263,   60,   60,   60,   60,
      262,  262,  257,  257,  257,   60,   60,  263,  263,  263,
      257,  257,  257,  263,  263,  263,  257,  257,  263,  263,
      257,  257,  263,  263,  257,  263,    0,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257
    } ;

static const flex_int16_t yy_nxt[1248] =
    {   0,
        6,    7,    8,    7,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,    6,   22,   23,
       24,   25,   26,   27,   28,   27,   29,   30,   27,   31,
       27,   32,   33,   34,   27,   27,   35,   27,   36,   27,
        6,   37,   27,   26,   28,   27,   29,   30,   27,   31,
       27,   32,   33,   34,   27,   27,   35,   27,   36,   38,
       39,   27,   40,   41,   42,   41,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   40,
       56,   57,   58,   59,   60,   61,   62,   61,   63,   64,
       61,   65,   61,   66,   67,   68,   61,   61,   69,   61,

       70,   61,   40,   71,   61,   60,   62,   61,   63,   64,
       61,   65,   61,   66,   67,   68,   61,   61,   69,   61,
       70,   72,   73,   61,   74,   74,   74,   74,   74,   74,
       81,   85,   87,  137,   88,   93,   86,   90,   91,   94,
       94,   94,  132,  133,   89,   94,   94,   94,  161,  161,
       94,   94,   94,  137,   78,   96,   94,   94,   94,  158,
      218,   96,   82,  218,   89,  203,   96,  116,   74,  116,
       97,   98,   96,   94,   94,   94,  257,  103,  257,  159,
      158,   95,  203,   94,   94,   94,   74,   74,   74,   96,
       97,  137,   98,   94,   94,   94,  104,  105,  103,   96,

      106,  107,   99,   99,   99,   99,  185,  163,  100,   96,
      257,  137,   94,   94,   94,  108,  104,  105,   80,  109,
      106,  107,  179,  101,  102,   94,   94,   94,   96,  163,
       94,   94,   94,  137,   76,  108,  129,  119,  130,  109,
      140,   96,   76,  101,  102,  110,   96,  137,  131,  152,
      137,  149,  111,  137,  137,  137,  185,  113,  112,  161,
      161,  140,   74,   74,   74,  110,  187,  137,  131,  152,
      137,  149,  111,   76,  137,  137,  119,  113,  112,  115,
      115,   76,  115,  115,  115,  115,  115,  115,  115,  127,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,

      115,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  121,  115,
      115,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  115,  115,
      120,   80,  145,  122,  146,  147,   81,  123,  148,   80,
      137,  150,  137,  155,  118,  151,  201,  137,   94,   94,
       94,  161,  183,  145,  146,  147,  163,  165,  148,  160,
      137,  150,  137,  155,   96,  151,  201,  137,   82,  124,
      115,  115,   84,  115,  115,  115,  115,  115,  115,  115,
      257,  115,  115,  115,  115,  115,  115,  115,  115,  115,

      115,  115,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      115,  115,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  115,
      115,  135,  115,  136,   94,  136,  115,  115,  115,  115,
      115,  115,   80,  115,  115,  115,  115,  115,  137,  138,
      115,  115,  115,  115,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  139,  137,  137,  137,  137,  137,
      137,  137,  115,  115,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  139,  137,  137,  137,  137,  137,

      137,  115,  115,  137,  141,   84,  141,  153,   87,  142,
       88,  137,   76,  154,  137,  162,   94,   94,   94,   77,
       89,  116,   74,  116,  143,  144,  156,  153,  134,  127,
      128,  137,   96,  154,  137,  162,   94,   94,   94,  184,
       89,   94,   94,   94,  143,  144,   94,   94,   94,   94,
       94,   94,   96,   94,   94,   94,  127,   96,  142,  184,
      166,  100,   96,  158,  126,   96,   94,   94,   94,   96,
       94,   94,   94,  125,  137,  167,  141,  169,  141,   80,
      166,  185,   96,  168,  158,  123,   96,   80,   94,   94,
       94,  172,  172,  172,  137,  167,  170,  169,  171,   94,

       94,   94,  137,  168,   96,  189,  117,   96,   94,   94,
       94,   94,   94,   94,  114,   96,  170,  124,  171,   94,
       94,   94,  137,   92,   96,  189,  188,   96,  173,   94,
       94,   94,  129,  137,  130,   96,   94,   94,   94,  137,
      191,  175,  190,  174,  131,   96,  188,  137,  173,  136,
       94,  136,   96,  137,  176,   94,   94,   94,   84,  137,
      191,  175,  190,  174,  131,  138,  137,  137,  192,  137,
      193,   96,  177,  137,  176,   83,   79,  195,  137,  137,
      178,   77,  202,  199,  202,   75,  137,  203,  192,  137,
      193,  257,  177,  137,  194,  172,  194,  195,  137,  137,

      178,  115,  115,  199,  115,  115,  115,  115,  115,  115,
      115,  198,  115,  115,  115,  115,  115,  137,  115,  115,
      115,  115,  115,  137,  200,  137,  228,  196,  197,  137,
      137,  198,  204,  204,  204,  230,  257,  137,   94,   94,
       94,  115,  115,  137,  200,  137,  228,  196,  197,  137,
      137,  161,  183,  257,   96,  230,   94,   94,   94,  160,
      115,  115,  115,  115,  257,  115,  115,  115,  115,  115,
      115,  115,   96,  115,  115,  115,  115,  115,  233,  115,
      115,  115,  115,  115,  180,  257,  257,  179,  257,  257,
      211,  211,  211,  137,   94,   94,   94,  257,  233,   94,

       94,   94,  115,  115,  181,  180,   96,  179,  179,  217,
       96,  217,  257,  137,  218,   96,  219,  204,  219,  205,
      257,  115,  115,  115,  115,  257,  115,  115,  115,  115,
      115,  115,  115,  207,  115,  115,  115,  115,  115,  205,
      115,  115,  115,  115,  115,   94,   94,   94,  137,   94,
       94,   94,  257,  207,  257,  172,  172,  172,  204,  204,
      204,   96,  257,  115,  115,   96,  257,  223,  137,  137,
      206,   96,   94,   94,   94,   94,   94,   94,  208,   94,
       94,   94,  115,  115,  238,  257,  209,  223,   96,  137,
      206,   96,   94,   94,   94,   96,  220,  210,  208,   94,

       94,   94,  137,  257,  238,  212,  209,  179,   96,  137,
      213,  137,  221,  225,  222,   96,  220,  210,  137,  137,
      137,  216,  137,  215,  214,  212,  257,  179,  179,  137,
      213,  137,  221,  225,  222,  219,  204,  219,  137,  137,
      137,  216,  257,  215,  214,  115,  115,  257,  115,  115,
      115,  115,  115,  115,  115,  229,  115,  115,  115,  115,
      115,  137,  115,  115,  115,  115,  115,  194,  172,  194,
      226,  211,  226,  227,  137,  229,   94,   94,   94,  179,
      257,  137,  137,  138,  257,  115,  115,   94,   94,   94,
      137,  257,   96,  227,  137,   94,   94,   94,  224,  179,

      179,  137,  137,   96,  115,  115,   94,   94,   94,  236,
      137,   96,   94,   94,   94,  137,  257,  257,  224,  137,
      231,  137,   96,  257,  257,  211,  211,  211,   96,  236,
      257,  232,   94,   94,   94,  137,   94,   94,   94,  137,
      231,   96,   94,   94,   94,   94,   94,   94,   96,  241,
      237,  232,   96,  234,  242,  235,  137,  243,   96,  137,
      137,   96,  226,  211,  226,   94,   94,   94,  244,  241,
      237,  245,  257,  234,  242,  235,  137,  243,  138,  137,
      137,   96,   94,   94,   94,  246,  247,  248,  244,  249,
      239,  245,  240,  250,  251,  252,  253,  254,   96,  255,

      256,  257,  257,  257,  257,  246,  247,  248,  257,  249,
      239,  257,  240,  250,  251,  252,  253,  254,  257,  255,
      256,   76,   76,   76,   76,   76,   76,   80,   80,   80,
       80,   80,   80,   95,   95,  257,   95,   95,  115,  115,
      257,  257,  115,  115,  118,  118,  118,  118,  118,  118,
      122,  122,  122,  122,  122,  122,  157,  157,  160,  160,
      160,  160,  160,  160,  164,  164,  179,  179,  257,  257,
      179,  179,  182,  182,  182,  182,  182,  182,  186,  186,
      257,  257,  186,  186,    5,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,

      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257
    } ;

static const flex_int16_t yy_chk[1248] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    7,    7,    7,    8,    8,    8,
       13,   20,   21,   61,   21,  261,   20,   22,   22,   26,
       26,   26,   56,   56,   21,   27,   27,   27,   83,   83,
       28,   28,   28,   61,  259,   26,   30,   30,   30,   79,
      218,   27,   13,  217,   21,  203,   28,   41,   41,   41,
       26,   28,   30,   32,   32,   32,   31,   30,   31,   79,
       79,   31,  202,   33,   33,   33,   42,   42,   42,   32,
       26,  137,   28,   29,   29,   29,   31,   31,   30,   33,

       31,   32,   89,   29,   89,   29,  185,   89,   29,   29,
      124,  137,   34,   34,   34,   33,   31,   31,  124,   33,
       31,   32,  181,   29,   29,   35,   35,   35,   34,  163,
       36,   36,   36,  147,   44,   33,   55,   44,   55,   33,
       62,   35,   44,   29,   29,   34,   36,   68,   55,   68,
       62,   66,   35,  147,   66,  152,  141,   36,   35,  160,
      160,   62,   74,   74,   74,   34,  138,   68,   55,   68,
       62,   66,   35,  118,   66,  152,  118,   36,   35,   45,
       45,  118,   45,   45,   45,   45,   45,   45,   45,  129,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   47,   64,  123,   65,   65,   80,   47,   65,   47,
       67,   67,   64,   70,  119,   67,  158,   70,   94,   94,
       94,  126,  126,   64,   65,   65,   99,   96,   65,  126,
       67,   67,   64,   70,   94,   67,  158,   70,   80,   47,
       59,   59,   87,   59,   59,   59,   59,   59,   59,   59,
       82,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   81,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,

       60,   60,   60,   60,   63,   84,   63,   69,   88,   63,
       88,   69,   77,   69,  188,   84,   95,   95,   95,   76,
       88,  116,  116,  116,   63,   63,   72,   69,   58,  127,
       54,   69,   95,   69,  188,   84,   97,   97,   97,  127,
       88,   98,   98,   98,   63,   63,  100,  100,  100,  101,
      101,  101,   97,  102,  102,  102,   53,   98,  142,  127,
       97,  100,  100,  159,   52,  101,  103,  103,  103,  102,
      104,  104,  104,   49,  142,   98,  131,  102,  131,  122,
       97,  131,  103,  101,  159,  122,  104,  122,  105,  105,
      105,  106,  106,  106,  142,   98,  103,  102,  104,  107,

      107,  107,  140,  101,  105,  140,   43,  106,  108,  108,
      108,  109,  109,  109,   38,  107,  103,  122,  104,  110,
      110,  110,  140,   24,  108,  140,  139,  109,  107,  111,
      111,  111,  130,  139,  130,  110,  112,  112,  112,  143,
      144,  109,  143,  108,  130,  111,  139,  144,  107,  136,
      136,  136,  112,  139,  111,  113,  113,  113,   19,  143,
      144,  109,  143,  108,  130,  136,  191,  144,  145,  145,
      146,  113,  112,  146,  111,   18,   11,  149,  154,  149,
      113,   10,  162,  154,  162,    9,  191,  162,  145,  145,
      146,    5,  112,  146,  148,  148,  148,  149,  154,  149,

      113,  120,  120,  154,  120,  120,  120,  120,  120,  120,
      120,  153,  120,  120,  120,  120,  120,  153,  120,  120,
      120,  120,  120,  150,  155,  148,  198,  150,  151,  151,
      155,  153,  165,  165,  165,  200,    0,  153,  166,  166,
      166,  120,  120,  150,  155,  148,  198,  150,  151,  151,
      155,  182,  182,    0,  166,  200,  169,  169,  169,  182,
      120,  120,  121,  121,    0,  121,  121,  121,  121,  121,
      121,  121,  169,  121,  121,  121,  121,  121,  209,  121,
      121,  121,  121,  121,  121,    0,    0,  179,    0,    0,
      174,  174,  174,  220,  167,  167,  167,    0,  209,  170,

      170,  170,  121,  121,  121,  121,  174,  179,  179,  184,
      167,  184,    0,  220,  184,  170,  187,  187,  187,  167,
        0,  121,  121,  135,  135,    0,  135,  135,  135,  135,
      135,  135,  135,  170,  135,  135,  135,  135,  135,  167,
      135,  135,  135,  135,  135,  168,  168,  168,  221,  171,
      171,  171,    0,  170,    0,  172,  172,  172,  204,  204,
      204,  168,    0,  135,  135,  171,    0,  193,  221,  193,
      168,  172,  173,  173,  173,  175,  175,  175,  171,  176,
      176,  176,  135,  135,  224,    0,  172,  193,  173,  193,
      168,  175,  178,  178,  178,  176,  189,  173,  171,  177,

      177,  177,  189,    0,  224,  175,  172,  180,  178,  225,
      176,  192,  190,  195,  192,  177,  189,  173,  190,  195,
      227,  180,  189,  178,  177,  175,    0,  180,  180,  225,
      176,  192,  190,  195,  192,  219,  219,  219,  190,  195,
      227,  180,    0,  178,  177,  186,  186,    0,  186,  186,
      186,  186,  186,  186,  186,  199,  186,  186,  186,  186,
      186,  199,  186,  186,  186,  186,  186,  194,  194,  194,
      196,  196,  196,  197,  197,  199,  205,  205,  205,  216,
        0,  199,  228,  194,    0,  186,  186,  206,  206,  206,
      229,    0,  205,  197,  197,  207,  207,  207,  194,  216,

      216,  196,  228,  206,  186,  186,  208,  208,  208,  222,
      229,  207,  210,  210,  210,  222,    0,    0,  194,  230,
      207,  196,  208,    0,    0,  211,  211,  211,  210,  222,
        0,  208,  212,  212,  212,  222,  213,  213,  213,  230,
      207,  211,  214,  214,  214,  215,  215,  215,  212,  233,
      223,  208,  213,  211,  234,  211,  223,  235,  214,  236,
      237,  215,  226,  226,  226,  231,  231,  231,  238,  233,
      223,  239,    0,  211,  234,  211,  223,  235,  226,  236,
      237,  231,  232,  232,  232,  240,  242,  243,  238,  245,
      226,  239,  226,  246,  247,  248,  249,  250,  232,  251,

      253,    0,    0,    0,    0,  240,  242,  243,    0,  245,
      226,    0,  226,  246,  247,  248,  249,  250,    0,  251,
      253,  258,  258,  258,  258,  258,  258,  260,  260,  260,
      260,  260,  260,  262,  262,    0,  262,  262,  263,  263,
        0,    0,  263,  263,  264,  264,  264,  264,  264,  264,
      265,  265,  265,  265,  265,  265,  266,  266,  267,  267,
      267,  267,  267,  267,  268,  268,  269,  269,    0,    0,
      269,  269,  270,  270,  270,  270,  270,  270,  271,  271,
        0,    0,  271,  271,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,

      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[54] =
    {   0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
/***************************************************************************
                          qgsexpressionlexer.ll
                          --------------------
    begin                : August 2011
    copyright            : (C) 2011 by Martin Dobias
    email                : wonder.sk at gmail dot com
 ***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
#line 22 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
 // this makes flex generate lexer with context + init/destroy functions
 // this makes Bison send yylex another argument to use instead of using the global variable yylval
 // ensure that lexer will be 8-bit (and not just 7-bit)

#include <stdlib.h>  // atof()

#include "qgsexpression.h"
#include "expression/qgsexpressionnodeimpl.h"
#include "qgsexpressionfunction.h"
        struct expression_parser_context;
#include "qgsexpressionparser.hpp"
#include <QLocale>

// if not defined, searches for isatty()
// which doesn't in MSVC compiler
#define YY_NEVER_INTERACTIVE 1

#ifndef YY_NO_UNPUT
#define YY_NO_UNPUT	// unused
#endif

#ifdef _MSC_VER
#define YY_NO_UNISTD_H
#endif

#define B_OP(x) yylval->b_op = QgsExpressionNodeBinaryOperator::x
#define U_OP(x) yylval->u_op = QgsExpressionNodeUnaryOperator::x
#define TEXT                   yylval->text = new QString( QString::fromUtf8(yytext) );
#define TEXT_FILTER(filter_fn) yylval->text = new QString( filter_fn( QString::fromUtf8(yytext) ) );

#define YY_USER_ACTION \
    yylloc->first_line = yylloc->last_line; \
    yylloc->first_column = yylloc->last_column; \
    for(int i = 0; yytext[i] != '\0'; i++) { \
    if(yytext[i] == '\n') { \
        yylloc->last_line++; \
        yylloc->last_column = 0; \
    } \
    else { \
        yylloc->last_column++; \
    } \
}

static QString stripText(QString text)
{
  // strip single quotes on start,end
  text = text.mid( 1, text.length() - 2 );

  // make single "single quotes" from double "single quotes"
  text.replace( "''", "'" );

  // strip \n \' etc.
  int index = 0;
  while (( index = text.indexOf( '\\', index ) ) != -1 )
  {
    text.remove( index, 1 ); // delete backslash
    QChar chr;
    switch ( text[index].toLatin1() ) // evaluate backslashed character
    {
      case 'n':  chr = '\n'; break;
      case 't':  chr = '\t'; break;
      case '\\': chr = '\\'; break;
      case '\'': chr = '\''; break;
      default: chr = '?'; break;
    }
    text[index++] = chr; // set new character and push index +1
  }
  return text;
}

static QString stripNamedText(QString text)
{
  text.remove(":=");
  return text.trimmed();
}

static QString stripColumnRef(QString text)
{
  // strip double quotes on start,end
  text = text.mid( 1, text.length() - 2 );

  // make single "double quotes" from double "double quotes"
  text.replace( "\"\"", "\"" );
  return text;
}

// C locale for correct parsing of numbers even if the system locale is different
Q_GLOBAL_STATIC_WITH_ARGS(QLocale, cLocale, ("C") )

#line 1149 "/Volumes/Data/work/projects/desktop/qgis3/src/core/flex_qgsexpressionlexer.cpp"

#line 1151 "/Volumes/Data/work/projects/desktop/qgis3/src/core/flex_qgsexpressionlexer.cpp"

#define INITIAL 0
#define BLOCK_COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			yy_size_t yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 150 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"


#line 1437 "/Volumes/Data/work/projects/desktop/qgis3/src/core/flex_qgsexpressionlexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 258 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 257 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 153 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
BEGIN(BLOCK_COMMENT);
	YY_BREAK


case 2:
YY_RULE_SETUP
#line 156 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
BEGIN(INITIAL);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 157 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
// eat comment in chunks
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 158 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
// eat the lone star
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 159 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
yylineno++;
	YY_BREAK

case 6:
YY_RULE_SETUP
#line 162 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ U_OP(uoNot); return NOT; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 163 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boAnd); return AND; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 164 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boOr);  return OR;  }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 166 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boEQ); return EQ; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 167 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boNE); return NE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 168 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boLE); return LE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 169 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boGE); return GE; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 170 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boNE); return NE; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 171 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boLT); return LT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 172 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boGT); return GT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 174 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boRegexp); return REGEXP; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 175 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boLike); return LIKE; }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 176 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boNotLike); return LIKE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 177 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boILike); return LIKE; }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 178 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boNotILike); return LIKE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 179 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boIs); return IS; }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 180 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boIsNot); return IS; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 181 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boConcat); return CONCAT; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 183 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boPlus); return PLUS; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 184 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boMinus); return MINUS; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 185 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boMul); return MUL; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 186 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boIntDiv); return INTDIV; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 187 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boDiv); return DIV; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 188 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boMod); return MOD; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 189 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ B_OP(boPow); return POW; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 191 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ return IN; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 193 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ return NULLVALUE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 195 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ return CASE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 196 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ return WHEN; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 197 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ return THEN; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 198 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ return ELSE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 199 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ return END;  }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 201 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ return yytext[0]; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 203 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ return COMMA; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 205 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ yylval->numberFloat = cLocale()->toDouble( QString::fromLatin1(yytext) ); return NUMBER_FLOAT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 206 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{
	bool ok;
	yylval->numberInt = cLocale()->toInt( QString::fromLatin1(yytext), &ok );
	if( ok )
		return NUMBER_INT;

  yylval->numberInt64 = cLocale()->toLongLong( QString::fromLatin1(yytext), &ok );
  if( ok )
    return NUMBER_INT64;

	yylval->numberFloat = cLocale()->toDouble( QString::fromLatin1(yytext), &ok );
	if( ok )
		return NUMBER_FLOAT;

	return Unknown_CHARACTER;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 223 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ yylval->boolVal = QString( yytext ).compare( "true", Qt::CaseInsensitive ) == 0; return BOOLEAN; }
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 225 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ TEXT_FILTER(stripText); return STRING; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 227 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ TEXT; return NAME; }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 229 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ TEXT_FILTER(stripNamedText); return NAMED_NODE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 231 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ TEXT; return SPECIAL_COL; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 233 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ TEXT; return VARIABLE; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 235 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ TEXT; return NAME; }
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 237 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ TEXT_FILTER(stripColumnRef); return QUOTED_COLUMN_REF; }
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 239 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
/* skip blanks and tabs */
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 241 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
/* skip line comments */
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 243 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
{ return Unknown_CHARACTER; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 246 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"
ECHO;
	YY_BREAK
#line 1794 "/Volumes/Data/work/projects/desktop/qgis3/src/core/flex_qgsexpressionlexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(BLOCK_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 258 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 258 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 257);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 246 "/Volumes/Data/work/projects/desktop/qgis3/src/core/qgsexpressionlexer.ll"


