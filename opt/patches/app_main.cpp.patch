--- a/src/app/main.cpp	2022-02-18 15:06:10.000000000 +0300
+++ b/src/app/main.cpp	2022-04-21 14:12:01.488429300 +0300
@@ -34,6 +34,7 @@
 #include <QImageReader>
 #include <QMessageBox>
 #include <QStandardPaths>
+#include <QLibraryInfo>
 
 #include <cstdio>
 #include <cstdlib>
@@ -103,7 +104,7 @@
 #include "qgsproject.h"
 #include "qgsrectangle.h"
 #include "qgslogger.h"
-#include "qgsdxfexport.h"
+// #include "qgsdxfexport.h"
 #include "qgsmapthemes.h"
 #include "qgsvectorlayer.h"
 #include "qgis_app.h"
@@ -123,6 +124,8 @@
 #include "qgsopenclutils.h"
 #endif
 
+#include "ngcustomization.h"
+
 /**
  * Print QGIS version
  */
@@ -140,7 +143,8 @@
   QStringList msg;
 
   msg
-      << QStringLiteral( "QGIS is a user friendly Open Source Geographic Information System.\n" )
+      << QStringLiteral(VENDOR) << QStringLiteral(" QGIS - ") << QStringLiteral(VENDOR_VERSION) << QStringLiteral(" (") << QStringLiteral(VERSION) << QStringLiteral(")\n")
+      << QStringLiteral(VENDOR) << QStringLiteral(" QGIS is a user friendly Open Source Geographic Information System.\n")
       << QStringLiteral( "Usage: " ) << appName <<  QStringLiteral( " [OPTION] [FILE]\n" )
       << QStringLiteral( "  OPTION:\n" )
       << QStringLiteral( "\t[-v, --version]\tdisplay version information and exit\n" )
@@ -161,13 +165,13 @@
       << QStringLiteral( "\t[-f, --code path]\trun the given python file on load\n" )
       << QStringLiteral( "\t[-d, --defaultui]\tstart by resetting user ui settings to default\n" )
       << QStringLiteral( "\t[--hide-browser]\thide the browser widget\n" )
-      << QStringLiteral( "\t[--dxf-export filename.dxf]\temit dxf output of loaded datasets to given file\n" )
-      << QStringLiteral( "\t[--dxf-extent xmin,ymin,xmax,ymax]\tset extent to export to dxf\n" )
-      << QStringLiteral( "\t[--dxf-symbology-mode none|symbollayer|feature]\tsymbology mode for dxf output\n" )
-      << QStringLiteral( "\t[--dxf-scale-denom scale]\tscale for dxf output\n" )
-      << QStringLiteral( "\t[--dxf-encoding encoding]\tencoding to use for dxf output\n" )
-      << QStringLiteral( "\t[--dxf-map-theme maptheme]\tmap theme to use for dxf output\n" )
-      << QStringLiteral( "\t[--take-screenshots output_path]\ttake screen shots for the user documentation\n" )
+    //   << QStringLiteral( "\t[--dxf-export filename.dxf]\temit dxf output of loaded datasets to given file\n" )
+    //   << QStringLiteral( "\t[--dxf-extent xmin,ymin,xmax,ymax]\tset extent to export to dxf\n" )
+    //   << QStringLiteral( "\t[--dxf-symbology-mode none|symbollayer|feature]\tsymbology mode for dxf output\n" )
+    //   << QStringLiteral( "\t[--dxf-scale-denom scale]\tscale for dxf output\n" )
+    //   << QStringLiteral( "\t[--dxf-encoding encoding]\tencoding to use for dxf output\n" )
+    //   << QStringLiteral( "\t[--dxf-map-theme maptheme]\tmap theme to use for dxf output\n" )
+    //   << QStringLiteral( "\t[--take-screenshots output_path]\ttake screen shots for the user documentation\n" )
       << QStringLiteral( "\t[--screenshots-categories categories]\tspecify the categories of screenshot to be used (see QgsAppScreenShots::Categories).\n" )
       << QStringLiteral( "\t[--profile name]\tload a named profile from the users profiles folder.\n" )
       << QStringLiteral( "\t[-s, --profiles-path path]\tpath to store user profile folders. Will create profiles inside a {path}\\profiles folder \n" )
@@ -237,8 +241,8 @@
 }
 
 static void dumpBacktrace( unsigned int depth )
-{
-  if ( depth == 0 )
+{    
+/*  if ( depth == 0 )
     depth = 20;
 
 #ifdef QGIS_CRASH
@@ -311,9 +315,9 @@
   }
 #elif defined(Q_OS_WIN)
   // TODO Replace with incoming QgsStackTrace
-#else
+#else */
   Q_UNUSED( depth )
-#endif
+//#endif
 }
 
 #ifdef QGIS_CRASH
@@ -585,12 +589,12 @@
   bool mySkipBadLayers = false;
   bool myCustomization = true;
 
-  QString dxfOutputFile;
-  QgsDxfExport::SymbologyExport dxfSymbologyMode = QgsDxfExport::SymbolLayerSymbology;
-  double dxfScale = 50000.0;
-  QString dxfEncoding = QStringLiteral( "CP1252" );
-  QString dxfMapTheme;
-  QgsRectangle dxfExtent;
+//   QString dxfOutputFile;
+//   QgsDxfExport::SymbologyExport dxfSymbologyMode = QgsDxfExport::SymbolLayerSymbology;
+//   double dxfScale = 50000.0;
+//   QString dxfEncoding = QStringLiteral( "CP1252" );
+//   QString dxfMapTheme;
+//   QgsRectangle dxfExtent;
 
   bool takeScreenShots = false;
   QString screenShotsPath;
@@ -745,91 +749,91 @@
         {
           myRestoreDefaultWindowState = true;
         }
-        else if ( arg == QLatin1String( "--dxf-export" ) )
-        {
-          dxfOutputFile = args[++i];
-        }
-        else if ( arg == QLatin1String( "--dxf-extent" ) )
-        {
-          QgsLocaleNumC l;
-          QString ext( args[++i] );
-          QStringList coords( ext.split( ',' ) );
-
-          if ( coords.size() != 4 )
-          {
-            std::cerr << "invalid dxf extent " << ext.toStdString() << std::endl;
-            return 2;
-          }
-
-          for ( int i = 0; i < 4; i++ )
-          {
-            bool ok;
-            double d;
-
-            d = coords[i].toDouble( &ok );
-            if ( !ok )
-            {
-              std::cerr << "invalid dxf coordinate " << coords[i].toStdString() << " in extent " << ext.toStdString() << std::endl;
-              return 2;
-            }
-
-            switch ( i )
-            {
-              case 0:
-                dxfExtent.setXMinimum( d );
-                break;
-              case 1:
-                dxfExtent.setYMinimum( d );
-                break;
-              case 2:
-                dxfExtent.setXMaximum( d );
-                break;
-              case 3:
-                dxfExtent.setYMaximum( d );
-                break;
-            }
-          }
-        }
-        else if ( arg == QLatin1String( "--dxf-symbology-mode" ) )
-        {
-          QString mode( args[++i] );
-          if ( mode == QLatin1String( "none" ) )
-          {
-            dxfSymbologyMode = QgsDxfExport::NoSymbology;
-          }
-          else if ( mode == QLatin1String( "symbollayer" ) )
-          {
-            dxfSymbologyMode = QgsDxfExport::SymbolLayerSymbology;
-          }
-          else if ( mode == QLatin1String( "feature" ) )
-          {
-            dxfSymbologyMode = QgsDxfExport::FeatureSymbology;
-          }
-          else
-          {
-            std::cerr << "invalid dxf symbology mode " << mode.toStdString() << std::endl;
-            return 2;
-          }
-        }
-        else if ( arg == QLatin1String( "--dxf-scale-denom" ) )
-        {
-          bool ok;
-          QString scale( args[++i] );
-          dxfScale = scale.toDouble( &ok );
-          if ( !ok )
-          {
-            std::cerr << "invalid dxf scale " << scale.toStdString() << std::endl;
-            return 2;
-          }
-        }
-        else if ( arg == QLatin1String( "--dxf-encoding" ) )
-        {
-          dxfEncoding = args[++i];
-        }
-        else if ( arg == QLatin1String( "--dxf-map-theme" ) )
-        {
-          dxfMapTheme = args[++i];
-        }
+        // else if ( arg == QLatin1String( "--dxf-export" ) )
+        // {
+        //   dxfOutputFile = args[++i];
+        // }
+        // else if ( arg == QLatin1String( "--dxf-extent" ) )
+        // {
+        //   QgsLocaleNumC l;
+        //   QString ext( args[++i] );
+        //   QStringList coords( ext.split( ',' ) );
+
+        //   if ( coords.size() != 4 )
+        //   {
+        //     std::cerr << "invalid dxf extent " << ext.toStdString() << std::endl;
+        //     return 2;
+        //   }
+
+        //   for ( int i = 0; i < 4; i++ )
+        //   {
+        //     bool ok;
+        //     double d;
+
+        //     d = coords[i].toDouble( &ok );
+        //     if ( !ok )
+        //     {
+        //       std::cerr << "invalid dxf coordinate " << coords[i].toStdString() << " in extent " << ext.toStdString() << std::endl;
+        //       return 2;
+        //     }
+
+        //     switch ( i )
+        //     {
+        //       case 0:
+        //         dxfExtent.setXMinimum( d );
+        //         break;
+        //       case 1:
+        //         dxfExtent.setYMinimum( d );
+        //         break;
+        //       case 2:
+        //         dxfExtent.setXMaximum( d );
+        //         break;
+        //       case 3:
+        //         dxfExtent.setYMaximum( d );
+        //         break;
+        //     }
+        //   }
+        // }
+        // else if ( arg == QLatin1String( "--dxf-symbology-mode" ) )
+        // {
+        //   QString mode( args[++i] );
+        //   if ( mode == QLatin1String( "none" ) )
+        //   {
+        //     dxfSymbologyMode = QgsDxfExport::NoSymbology;
+        //   }
+        //   else if ( mode == QLatin1String( "symbollayer" ) )
+        //   {
+        //     dxfSymbologyMode = QgsDxfExport::SymbolLayerSymbology;
+        //   }
+        //   else if ( mode == QLatin1String( "feature" ) )
+        //   {
+        //     dxfSymbologyMode = QgsDxfExport::FeatureSymbology;
+        //   }
+        //   else
+        //   {
+        //     std::cerr << "invalid dxf symbology mode " << mode.toStdString() << std::endl;
+        //     return 2;
+        //   }
+        // }
+        // else if ( arg == QLatin1String( "--dxf-scale-denom" ) )
+        // {
+        //   bool ok;
+        //   QString scale( args[++i] );
+        //   dxfScale = scale.toDouble( &ok );
+        //   if ( !ok )
+        //   {
+        //     std::cerr << "invalid dxf scale " << scale.toStdString() << std::endl;
+        //     return 2;
+        //   }
+        // }
+        // else if ( arg == QLatin1String( "--dxf-encoding" ) )
+        // {
+        //   dxfEncoding = args[++i];
+        // }
+        // else if ( arg == QLatin1String( "--dxf-map-theme" ) )
+        // {
+        //   dxfMapTheme = args[++i];
+        // }
         else if ( arg == QLatin1String( "--take-screenshots" ) )
         {
           takeScreenShots = true;
@@ -909,9 +913,12 @@
     QgsCustomization::instance()->setEnabled( false );
   }
 
-  QCoreApplication::setOrganizationName( QgsApplication::QGIS_ORGANIZATION_NAME );
-  QCoreApplication::setOrganizationDomain( QgsApplication::QGIS_ORGANIZATION_DOMAIN );
-  QCoreApplication::setApplicationName( QgsApplication::QGIS_APPLICATION_NAME );
+  QgsDebugMsgLevel(QStringLiteral("Plugin path: ") + QLibraryInfo::location(QLibraryInfo::PluginsPath).toLocal8Bit().constData(), 2);
+  QgsDebugMsgLevel(QStringLiteral("Prefix: ") + QLibraryInfo::location(QLibraryInfo::PrefixPath).toLocal8Bit().constData(), 2);
+
+  QCoreApplication::setOrganizationName( QgsApplication::NGQGIS_ORGANIZATION_NAME );
+  QCoreApplication::setOrganizationDomain( QgsApplication::NGQGIS_ORGANIZATION_DOMAIN );
+  QCoreApplication::setApplicationName( QgsApplication::NGQGIS_APPLICATION_NAME );
   QCoreApplication::setAttribute( Qt::AA_DontShowIconsInMenus, false );
   QCoreApplication::setAttribute( Qt::AA_DisableWindowContextHelpButton, true );
 
@@ -924,6 +931,18 @@
   QCoreApplication::setAttribute( Qt::AA_ShareOpenGLContexts, true );
 #endif
 
+  // List font directory
+  QDir fontsDir(QgsApplication::fontsPath());
+  QStringList filters;
+  filters << "*.ttf" << "*.otf";
+  QStringList fontsList = fontsDir.entryList(filters,  QDir::Files);
+  // Add font to database
+  QStringList::Iterator it = fontsList.begin();
+  while (it != fontsList.end()) {
+      QFontDatabase::addApplicationFont( fontsDir.filePath(*it) );
+      ++it;
+  }
+
   // Set up the QgsSettings Global Settings:
   // - use the path specified with --globalsettingsfile path,
   // - use the environment if not found
@@ -1058,6 +1077,8 @@
 
   QgsApplication myApp( argc, argv, myUseGuiFlag, QString(), QStringLiteral( "desktop" ) );
 
+
+
   // Set locale to emit QgsApplication's localeChanged signal
   QgsApplication::setLocale( QLocale() );
 
@@ -1115,12 +1136,12 @@
   //            e.g. loading splash screen, setting window icon, etc.
   //            Always honor QT_PLUGIN_PATH env var or qt.conf, which will
   //            be part of libraryPaths just after QgsApplication creation.
-#ifdef Q_OS_WIN
-  // For non static builds on win (static builds are not supported)
-  // we need to be sure we can find the qt image plugins.
-  QCoreApplication::addLibraryPath( QApplication::applicationDirPath()
-                                    + QDir::separator() + "qtplugins" );
-#endif
+// #ifdef Q_OS_WIN
+//   // For non static builds on win (static builds are not supported)
+//   // we need to be sure we can find the qt image plugins.
+//   QCoreApplication::addLibraryPath( QApplication::applicationDirPath()
+//                                     + QDir::separator() + "qtplugins" );
+// #endif
 #if defined(Q_OS_UNIX)
   // Resulting libraryPaths has critical QGIS plugin paths first, then any Qt plugin paths, then
   // any dev-defined paths (in app's qt.conf) and/or user-defined paths (QT_PLUGIN_PATH env var).
@@ -1228,10 +1249,10 @@
   {
     // If the GDAL plugins are bundled with the application and GDAL_DRIVER_PATH
     // is not already defined, use the GDAL plugins in the application bundle.
-    QString gdalPlugins( QCoreApplication::applicationDirPath().append( "/lib/gdalplugins" ) );
-    if ( QFile::exists( gdalPlugins ) )
+    QString gdalPlugins( QCoreApplication::applicationDirPath().append( "/../../../../" + QString( QGIS_PLUGIN_SUBDIR ) ) );
+    if ( QFile::exists( gdalPlugins ) && !getenv( "GDAL_DRIVER_PATH" ) )
     {
-      setenv( "GDAL_DRIVER_PATH", gdalPlugins.toUtf8(), 1 );
+        setenv( "GDAL_DRIVER_PATH", gdalPlugins.toUtf8(), 1 );
     }
   }
 
@@ -1254,15 +1275,27 @@
   }
 
   // Point PYTHONHOME to embedded interpreter if present in the bundle
-  if ( !getenv( "PYTHONHOME" ) )
-  {
-    if ( QFile::exists( QCoreApplication::applicationDirPath().append( "/bin/python3" ) ) )
-    {
-      setenv( "PYTHONHOME", QCoreApplication::applicationDirPath().toUtf8().constData(), 1 );
-    }
-  }
-#endif
-
+//   if ( !getenv( "PYTHONHOME" ) )
+//   {
+//     if ( QFile::exists( QCoreApplication::applicationDirPath().append( "/bin/python3" ) ) )
+//     {
+//       setenv( "PYTHONHOME", QCoreApplication::applicationDirPath().toUtf8().constData(), 1 );
+//     }
+//   }
+#endif
+
+#ifdef Q_OS_WIN
+    putenv( QString("GDAL_DATA=" + QCoreApplication::applicationDirPath().append( "/../share/gdal" )).toUtf8().constData() );
+    putenv( QString("GDAL_DRIVER_PATH=" + QCoreApplication::applicationDirPath().append( "/../" ) + QString( QGIS_PLUGIN_SUBDIR ) ).toUtf8().constData() );
+    putenv(QString("PROJ_LIB=" + QCoreApplication::applicationDirPath().append( "/../share/proj" )).toUtf8().constData());
+    if(!getenv("SSL_CERT_FILE")) {
+        putenv(QString("SSL_CERT_FILE=" + QCoreApplication::applicationDirPath().append( "/../share/ssl/certs/cert.pem" )).toUtf8().constData());
+    }
+    if (!getenv("CURL_CA_BUNDLE")) {
+        putenv(QString("CURL_CA_BUNDLE=" + QCoreApplication::applicationDirPath().append( "/../share/ssl/certs/cert.pem" )).toUtf8().constData());
+    }
+#endif // Q_OS_WIN
+
   // custom environment variables
   QMap<QString, QString> systemEnvVars = QgsApplication::systemEnvVars();
   bool useCustomVars = settings.value( QStringLiteral( "qgis/customEnvVarsUse" ), QVariant( false ) ).toBool();
@@ -1403,7 +1436,7 @@
   // this should be done in QgsApplication::init() but it doesn't know the settings dir.
   QgsApplication::setMaxThreads( settings.value( QStringLiteral( "qgis/max_threads" ), -1 ).toInt() );
 
-  QgisApp *qgis = new QgisApp( mypSplash, myRestorePlugins, mySkipBadLayers, mySkipVersionCheck, rootProfileFolder, profileName ); // "QgisApp" used to find canonical instance
+  QgisApp *qgis = new NGQgisApp( mypSplash, myRestorePlugins, mySkipBadLayers, mySkipVersionCheck, rootProfileFolder, profileName ); // "QgisApp" used to find canonical instance
   qgis->setObjectName( QStringLiteral( "QgisApp" ) );
 
   QgsApplication::connect(
@@ -1535,7 +1568,7 @@
 
     return 1;
   }
-
+/*
   if ( !dxfOutputFile.isEmpty() )
   {
     qgis->hide();
@@ -1616,7 +1649,7 @@
 
     return static_cast<int>( res );
   }
-
+*/
   // make sure we don't have a dirty blank project after launch
   QgsProject::instance()->setDirty( false );
 
