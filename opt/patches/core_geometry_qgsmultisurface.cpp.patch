--- a/src/core/geometry/qgsmultisurface.cpp	2022-02-18 15:06:10.000000000 +0300
+++ b/src/core/geometry/qgsmultisurface.cpp	2022-03-21 09:56:36.000000000 +0300
@@ -24,7 +24,7 @@
 #include "qgsmulticurve.h"
 
 #include <QJsonObject>
-#include <nlohmann/json.hpp>
+// #include <nlohmann/json.hpp>
 
 QgsMultiSurface::QgsMultiSurface()
 {
@@ -122,17 +122,17 @@
 
 json QgsMultiSurface::asJsonObject( int precision ) const
 {
-  json polygons( json::array( ) );
+  CPLJSONArray polygons;
   for ( const QgsAbstractGeometry *geom : std::as_const( mGeometries ) )
   {
     if ( qgsgeometry_cast<const QgsSurface *>( geom ) )
     {
-      json coordinates( json::array( ) );
+      CPLJSONArray coordinates;
       std::unique_ptr< QgsPolygon >polygon( static_cast<const QgsSurface *>( geom )->surfaceToPolygon() );
       std::unique_ptr< QgsLineString > exteriorLineString( polygon->exteriorRing()->curveToLine() );
       QgsPointSequence exteriorPts;
       exteriorLineString->points( exteriorPts );
-      coordinates.push_back( QgsGeometryUtils::pointsToJson( exteriorPts, precision ) );
+      coordinates.Add( QgsGeometryUtils::pointsToJson( exteriorPts, precision ) );
 
       std::unique_ptr< QgsLineString > interiorLineString;
       for ( int i = 0, n = polygon->numInteriorRings(); i < n; ++i )
@@ -140,16 +140,15 @@
         interiorLineString.reset( polygon->interiorRing( i )->curveToLine() );
         QgsPointSequence interiorPts;
         interiorLineString->points( interiorPts );
-        coordinates.push_back( QgsGeometryUtils::pointsToJson( interiorPts, precision ) );
+        coordinates.Add( QgsGeometryUtils::pointsToJson( interiorPts, precision ) );
       }
-      polygons.push_back( coordinates );
+      polygons.Add( coordinates );
     }
   }
-  return
-  {
-    {  "type",  "MultiPolygon" },
-    {  "coordinates", polygons }
-  };
+  json out;
+  out.Add("type",  "MultiPolygon");
+  out.Add("coordinates", polygons);
+  return out;
 }
 
 bool QgsMultiSurface::addGeometry( QgsAbstractGeometry *g )
