--- a/src/core/geometry/qgsmultipolygon.cpp	2022-02-18 15:06:10.000000000 +0300
+++ b/src/core/geometry/qgsmultipolygon.cpp	2022-03-09 16:41:17.000000000 +0300
@@ -23,7 +23,7 @@
 #include "qgsmultilinestring.h"
 
 #include <QJsonObject>
-#include <nlohmann/json.hpp>
+// #include <nlohmann/json.hpp>
 
 QgsMultiPolygon::QgsMultiPolygon()
 {
@@ -111,18 +111,18 @@
 
 json QgsMultiPolygon::asJsonObject( int precision ) const
 {
-  json polygons( json::array( ) );
+  CPLJSONArray polygons;
   for ( const QgsAbstractGeometry *geom : std::as_const( mGeometries ) )
   {
     if ( qgsgeometry_cast<const QgsPolygon *>( geom ) )
     {
-      json coordinates( json::array( ) );
+      CPLJSONArray coordinates;
       const QgsPolygon *polygon = static_cast<const QgsPolygon *>( geom );
 
       std::unique_ptr< QgsLineString > exteriorLineString( polygon->exteriorRing()->curveToLine() );
       QgsPointSequence exteriorPts;
       exteriorLineString->points( exteriorPts );
-      coordinates.push_back( QgsGeometryUtils::pointsToJson( exteriorPts, precision ) );
+      coordinates.Add( QgsGeometryUtils::pointsToJson( exteriorPts, precision ) );
 
       std::unique_ptr< QgsLineString > interiorLineString;
       for ( int i = 0, n = polygon->numInteriorRings(); i < n; ++i )
@@ -130,16 +130,15 @@
         interiorLineString.reset( polygon->interiorRing( i )->curveToLine() );
         QgsPointSequence interiorPts;
         interiorLineString->points( interiorPts );
-        coordinates.push_back( QgsGeometryUtils::pointsToJson( interiorPts, precision ) );
+        coordinates.Add( QgsGeometryUtils::pointsToJson( interiorPts, precision ) );
       }
-      polygons.push_back( coordinates );
+      polygons.Add( coordinates );
     }
   }
-  return
-  {
-    { "type", "MultiPolygon" },
-    { "coordinates", polygons }
-  };
+  json out;
+  out.Add("type", "MultiPolygon");
+  out.Add("coordinates", polygons);
+  return out;
 }
 
 bool QgsMultiPolygon::addGeometry( QgsAbstractGeometry *g )
