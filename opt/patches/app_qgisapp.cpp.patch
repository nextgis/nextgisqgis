--- asrc/app/qgisapp.cpp	2022-02-18 15:06:10.000000000 +0300
+++ "b\\src/app/qgisapp.cpp"	2022-04-19 15:00:53.770333900 +0300
@@ -114,7 +114,7 @@
 #include "qgsgeometrycheckregistry.h"
 
 #include "options/qgscodeeditoroptions.h"
-#include "options/qgsgpsdeviceoptions.h"
+// #include "options/qgsgpsdeviceoptions.h"
 #include "options/qgscustomprojectionoptions.h"
 
 #ifdef HAVE_3D
@@ -224,9 +224,9 @@
 #include "qgsdatumtransformdialog.h"
 #include "qgsdoublespinbox.h"
 #include "qgsdockwidget.h"
-#include "qgsdxfexport.h"
-#include "qgsdxfexportdialog.h"
-#include "qgsdwgimportdialog.h"
+// #include "qgsdxfexport.h"
+// #include "qgsdxfexportdialog.h"
+// #include "qgsdwgimportdialog.h"
 #include "qgsdecorationtitle.h"
 #include "qgsdecorationcopyright.h"
 #include "qgsdecorationimage.h"
@@ -250,7 +250,7 @@
 #include "qgsguiutils.h"
 #include "qgshtmlannotation.h"
 #include "qgsprojectionselectiondialog.h"
-#include "qgsgpsinformationwidget.h"
+// #include "qgsgpsinformationwidget.h"
 #include "qgsguivectorlayertools.h"
 #include "qgslabelingwidget.h"
 #include "qgsdiagramproperties.h"
@@ -308,7 +308,7 @@
 #include "qgsmapoverviewcanvas.h"
 #include "qgsmapsettings.h"
 #include "qgsmaptip.h"
-#include "qgsmbtiles.h"
+// #include "qgsmbtiles.h"
 #include "qgsmenuheader.h"
 #include "qgsmergeattributesdialog.h"
 #include "qgsmessageviewer.h"
@@ -392,8 +392,8 @@
 #include "qgsvectorlayer.h"
 #include "qgsvectorlayerproperties.h"
 #include "qgsvectorlayerdigitizingproperties.h"
-#include "qgsvectortilelayer.h"
-#include "qgsvectortilelayerproperties.h"
+// #include "qgsvectortilelayer.h"
+// #include "qgsvectortilelayerproperties.h"
 #include "qgspointcloudlayerproperties.h"
 #include "qgsmapthemes.h"
 #include "qgsmessagelogviewer.h"
@@ -527,6 +527,8 @@
 #include <dbghelp.h>
 #endif
 
+#include "ngsaboutdialog.h"
+
 class QTreeWidgetItem;
 class QgsUserProfileManager;
 class QgsUserProfile;
@@ -1370,7 +1372,7 @@
 
   addDockWidget( Qt::LeftDockWidgetArea, mBookMarksDockWidget );
   mBookMarksDockWidget->hide();
-
+/*
   // create the GPS tool on starting QGIS - this is like the browser
   mpGpsWidget = new QgsGpsInformationWidget( mMapCanvas );
   QgsPanelWidgetStack *gpsStack = new QgsPanelWidgetStack();
@@ -1391,7 +1393,7 @@
   // now add our widget to the dock - ownership of the widget is passed to the dock
   mpGpsDock->setWidget( gpsStack );
   mpGpsDock->hide();
-
+*/
   mLastMapToolMessage = nullptr;
 
   mLogViewer = new QgsMessageLogViewer( this );
@@ -1819,7 +1821,7 @@
   } );
 
   mCodeEditorWidgetFactory.reset( std::make_unique< QgsCodeEditorOptionsFactory >() );
-  mBabelGpsDevicesWidgetFactory.reset( std::make_unique< QgsGpsDeviceOptionsFactory >() );
+//   mBabelGpsDevicesWidgetFactory.reset( std::make_unique< QgsGpsDeviceOptionsFactory >() );
   mCustomProjectionsWidgetFactory.reset( std::make_unique< QgsCustomProjectionOptionsFactory >() );
 
 #ifdef HAVE_3D
@@ -1884,7 +1886,7 @@
 
   delete mpMaptip;
 
-  delete mpGpsWidget;
+//   delete mpGpsWidget;
 
   delete mOverviewMapCursor;
 
@@ -2171,7 +2173,7 @@
     {
       addPointCloudLayer( uri, u.name, u.providerKey );
     }
-    else if ( u.layerType == QLatin1String( "vector-tile" ) )
+    /*else if ( u.layerType == QLatin1String( "vector-tile" ) )
     {
       QgsTemporaryCursorOverride busyCursor( Qt::WaitCursor );
 
@@ -2200,7 +2202,7 @@
                                message, Qgis::MessageLevel::Warning );
       }
       addMapLayer( layer );
-    }
+    }*/
     else if ( u.layerType == QLatin1String( "plugin" ) )
     {
       addPluginLayer( uri, u.name, u.providerKey );
@@ -2495,7 +2497,7 @@
     connect( mDataSourceManagerDialog, SIGNAL( addVectorLayers( QStringList const &, QString const &, QString const & ) ),
              this, SLOT( addVectorLayers( QStringList const &, QString const &, QString const & ) ) );
     connect( mDataSourceManagerDialog, &QgsDataSourceManagerDialog::addMeshLayer, this, &QgisApp::addMeshLayer );
-    connect( mDataSourceManagerDialog, &QgsDataSourceManagerDialog::addVectorTileLayer, this, &QgisApp::addVectorTileLayer );
+    // connect( mDataSourceManagerDialog, &QgsDataSourceManagerDialog::addVectorTileLayer, this, &QgisApp::addVectorTileLayer );
     connect( mDataSourceManagerDialog, &QgsDataSourceManagerDialog::addPointCloudLayer, this, &QgisApp::addPointCloudLayer );
     connect( mDataSourceManagerDialog, &QgsDataSourceManagerDialog::showStatusMessage, this, &QgisApp::showStatusMessage );
     connect( mDataSourceManagerDialog, &QgsDataSourceManagerDialog::addDatabaseLayers, this, &QgisApp::addDatabaseLayers );
@@ -2695,8 +2697,8 @@
   connect( mActionNewReport, &QAction::triggered, this, &QgisApp::newReport );
   connect( mActionShowLayoutManager, &QAction::triggered, this, &QgisApp::showLayoutManager );
   connect( mActionExit, &QAction::triggered, this, &QgisApp::fileExit );
-  connect( mActionDxfExport, &QAction::triggered, this, &QgisApp::dxfExport );
-  connect( mActionDwgImport, &QAction::triggered, this, &QgisApp::dwgImport );
+//   connect( mActionDxfExport, &QAction::triggered, this, &QgisApp::dxfExport );
+//   connect( mActionDwgImport, &QAction::triggered, this, &QgisApp::dwgImport );
 
   // Edit Menu Items
 
@@ -2843,7 +2845,7 @@
   connect( mActionAddHanaLayer, &QAction::triggered, this, [ = ] { dataSourceManager( QStringLiteral( "hana" ) ); } );
   connect( mActionAddWmsLayer, &QAction::triggered, this, [ = ] { dataSourceManager( QStringLiteral( "wms" ) ); } );
   connect( mActionAddXyzLayer, &QAction::triggered, this, [ = ] { dataSourceManager( QStringLiteral( "xyz" ) ); } );
-  connect( mActionAddVectorTileLayer, &QAction::triggered, this, [ = ] { dataSourceManager( QStringLiteral( "vectortile" ) ); } );
+//   connect( mActionAddVectorTileLayer, &QAction::triggered, this, [ = ] { dataSourceManager( QStringLiteral( "vectortile" ) ); } );
   connect( mActionAddPointCloudLayer, &QAction::triggered, this, [ = ] { dataSourceManager( QStringLiteral( "pointcloud" ) ); } );
   connect( mActionAddWcsLayer, &QAction::triggered, this, [ = ] { dataSourceManager( QStringLiteral( "wcs" ) ); } );
 #ifdef HAVE_SPATIALITE
@@ -4302,7 +4304,7 @@
   mActionCustomProjection->setIcon( QgsApplication::getThemeIcon( QStringLiteral( "/mActionCustomProjection.svg" ) ) );
   mActionAddWmsLayer->setIcon( QgsApplication::getThemeIcon( QStringLiteral( "/mActionAddWmsLayer.svg" ) ) );
   mActionAddXyzLayer->setIcon( QgsApplication::getThemeIcon( QStringLiteral( "/mActionAddXyzLayer.svg" ) ) );
-  mActionAddVectorTileLayer->setIcon( QgsApplication::getThemeIcon( QStringLiteral( "/mActionAddVectorTileLayer.svg" ) ) );
+//   mActionAddVectorTileLayer->setIcon( QgsApplication::getThemeIcon( QStringLiteral( "/mActionAddVectorTileLayer.svg" ) ) );
   mActionAddWcsLayer->setIcon( QgsApplication::getThemeIcon( QStringLiteral( "/mActionAddWcsLayer.svg" ) ) );
 #ifdef HAVE_SPATIALITE
   mActionAddWfsLayer->setIcon( QgsApplication::getThemeIcon( QStringLiteral( "/mActionAddWfsLayer.svg" ) ) );
@@ -5047,12 +5049,12 @@
   }
   return QgsLayerTreeRegistryBridge::InsertionPoint( insertGroup, index );
 }
-
+/*
 void QgisApp::setGpsPanelConnection( QgsGpsConnection *connection )
 {
   mpGpsWidget->setConnection( connection );
 }
-
+*/
 void QgisApp::autoSelectAddedLayer( QList<QgsMapLayer *> layers )
 {
   if ( !layers.isEmpty() )
@@ -5360,7 +5362,7 @@
   QgsPluginRegistry::instance()->unloadAll();
 }
 
-#include "ui_defaults.h"
+#include "ngui_defaults.h"
 
 void QgisApp::restoreWindowState()
 {
@@ -5405,191 +5407,8 @@
 
 void QgisApp::about()
 {
-  static QgsAbout *sAbt = nullptr;
-  if ( !sAbt )
-  {
-    sAbt = new QgsAbout( this );
-    QString versionString = QStringLiteral( "<html><body><div align='center'><table width='100%'>" );
-
-    versionString += QStringLiteral( "<tr><td>%1</td><td>%2</td><td>" ).arg( tr( "QGIS version" ), Qgis::version() );
-
-    if ( QString( Qgis::devVersion() ) == QLatin1String( "exported" ) )
-    {
-      versionString += tr( "QGIS code branch" );
-      if ( Qgis::version().endsWith( QLatin1String( "Master" ) ) )
-      {
-        versionString += QLatin1String( "</td><td><a href=\"https://github.com/qgis/QGIS/tree/master\">master</a></td>" );
-      }
-      else
-      {
-        versionString += QStringLiteral( "</td><td><a href=\"https://github.com/qgis/QGIS/tree/release-%1_%2\">Release %1.%2</a></td>" )
-                         .arg( Qgis::versionInt() / 10000 ).arg( Qgis::versionInt() / 100 % 100 );
-      }
-    }
-    else
-    {
-      versionString += QStringLiteral( "%1</td><td><a href=\"https://github.com/qgis/QGIS/commit/%2\">%2</a></td>" ).arg( tr( "QGIS code revision" ) ).arg( Qgis::devVersion() );
-    }
-    versionString += QLatin1String( "</tr><tr>" );
-
-    // Qt version
-    const QString qtVersionCompiled{ QT_VERSION_STR };
-    const QString qtVersionRunning{ qVersion() };
-    if ( qtVersionCompiled != qtVersionRunning )
-    {
-      versionString += QStringLiteral( "<td>%1</td><td>%2</td>" ).arg( tr( "Compiled against Qt" ), qtVersionCompiled );
-      versionString += QStringLiteral( "<td>%1</td><td>%2</td>" ).arg( tr( "Running against Qt" ), qtVersionRunning );
-    }
-    else
-    {
-      versionString += QStringLiteral( "<td>%1</td><td colspan=\"3\">%2</td>" ).arg( tr( "Qt version" ), qtVersionCompiled );
-    }
-    versionString += QLatin1String( "</tr><tr>" );
-
-    // Python version
-    versionString += QStringLiteral( "<td>%1</td><td colspan=\"3\">%2</td>" ).arg( tr( "Python version" ), PYTHON_VERSION );
-    versionString += QLatin1String( "</tr><tr>" );
-
-    // GDAL version
-    const QString gdalVersionCompiled { GDAL_RELEASE_NAME };
-    const QString gdalVersionRunning { GDALVersionInfo( "RELEASE_NAME" ) };
-    if ( gdalVersionCompiled != gdalVersionRunning )
-    {
-      versionString += QStringLiteral( "<td>%1</td><td>%2</td>" ).arg( tr( "Compiled against GDAL/OGR" ), gdalVersionCompiled );
-      versionString += QStringLiteral( "<td>%1</td><td>%2</td>" ).arg( tr( "Running against GDAL/OGR" ), gdalVersionRunning );
-    }
-    else
-    {
-      versionString += QStringLiteral( "<td>%1</td><td colspan=\"3\">%2</td>" ).arg( tr( "GDAL/OGR version" ), gdalVersionCompiled );
-    }
-    versionString += QLatin1String( "</tr><tr>" );
-
-    // proj
-    PJ_INFO info = proj_info();
-    const QString projVersionCompiled { QStringLiteral( "%1.%2.%3" ).arg( PROJ_VERSION_MAJOR ).arg( PROJ_VERSION_MINOR ).arg( PROJ_VERSION_PATCH ) };
-    const QString projVersionRunning { info.version };
-    if ( projVersionCompiled != projVersionRunning )
-    {
-      versionString += QStringLiteral( "<td>%1</td><td>%2.%3.%4</td>" ).arg( tr( "Compiled against PROJ" ), projVersionCompiled );
-      versionString += QStringLiteral( "<td>%1</td><td>%2</td>" ).arg( tr( "Running against PROJ" ), projVersionRunning );
-    }
-    else
-    {
-      versionString += QStringLiteral( "<td>%1</td><td colspan=\"3\">%2</td>" ).arg( tr( "PROJ version" ), projVersionCompiled );
-    }
-    versionString += QLatin1String( "</tr><tr>" );
-
-    // CRS database versions
-    versionString += QStringLiteral( "<td>%1</td><td colspan=\"3\">%2 (%3)</td>" ).arg( tr( "EPSG Registry database version" ), QgsProjUtils::epsgRegistryVersion(), QgsProjUtils::epsgRegistryDate().toString( Qt::ISODate ) );
-    versionString += QLatin1String( "</tr><tr>" );
-
-    // GEOS version
-    const QString geosVersionCompiled { GEOS_CAPI_VERSION };
-    const QString geosVersionRunning { GEOSversion() };
-    if ( geosVersionCompiled != geosVersionRunning )
-    {
-      versionString += QStringLiteral( "<td>%1</td><td>%2</td>" ).arg( tr( "Compiled against GEOS" ), geosVersionCompiled );
-      versionString += QStringLiteral( "<td>%1</td><td>%2</td>" ).arg( tr( "Running against GEOS" ), geosVersionRunning );
-    }
-    else
-    {
-      versionString += QStringLiteral( "<td>%1</td><td colspan=\"3\">%2</td>" ).arg( tr( "GEOS version" ), geosVersionCompiled );
-    }
-    versionString += QLatin1String( "</tr><tr>" );
-
-    // SQLite version
-    const QString sqliteVersionCompiled { SQLITE_VERSION };
-    const QString sqliteVersionRunning { sqlite3_libversion() };
-    if ( sqliteVersionCompiled != sqliteVersionRunning )
-    {
-      versionString += QStringLiteral( "<td>%1</td><td>%2</td>" ).arg( tr( "Compiled against SQLite" ), sqliteVersionCompiled );
-      versionString += QStringLiteral( "<td>%1</td><td>%2</td>" ).arg( tr( "Running against SQLite" ), sqliteVersionRunning );
-    }
-    else
-    {
-      versionString += QStringLiteral( "<td>%1</td><td colspan=\"3\">%2</td>" ).arg( tr( "SQLite version" ), sqliteVersionCompiled );
-    }
-    versionString += QLatin1String( "</tr><tr>" );
-
-    // PDAL
-#ifdef HAVE_PDAL_QGIS
-    const QString pdalVersionCompiled { PDAL_VERSION };
-#if PDAL_VERSION_MAJOR_INT > 1 || (PDAL_VERSION_MAJOR_INT == 1 && PDAL_VERSION_MINOR_INT >= 7)
-    const QString pdalVersionRunningRaw { QString::fromStdString( pdal::Config::fullVersionString() ) };
-#else
-    const QString pdalVersionRunningRaw { QString::fromStdString( pdal::GetFullVersionString() ) };
-#endif
-    const QRegularExpression pdalVersionRx { QStringLiteral( "(\\d+\\.\\d+\\.\\d+)" )};
-    const QRegularExpressionMatch pdalVersionMatch{ pdalVersionRx.match( pdalVersionRunningRaw ) };
-    const QString pdalVersionRunning{ pdalVersionMatch.hasMatch() ? pdalVersionMatch.captured( 1 ) : pdalVersionRunningRaw };
-    if ( pdalVersionCompiled != pdalVersionRunning )
-    {
-      versionString += QStringLiteral( "<td>%1</td><td>%2</td>" ).arg( tr( "Compiled against PDAL" ), pdalVersionCompiled );
-      versionString += QStringLiteral( "<td>%1</td><td>%2</td>" ).arg( tr( "Running against PDAL" ), pdalVersionRunning );
-    }
-    else
-    {
-      versionString += QStringLiteral( "<td>%1</td><td colspan=\"3\">%2</td>" ).arg( tr( "PDAL version" ), pdalVersionCompiled );
-    }
-    versionString += QLatin1String( "</tr><tr>" );
-#endif
-
-    // postgres
-    versionString += QStringLiteral( "<td>%1</td><td colspan=\"3\">" ).arg( tr( "PostgreSQL client version" ) );
-#ifdef HAVE_POSTGRESQL
-    versionString += QStringLiteral( PG_VERSION );
-#else
-    versionString += tr( "No support" );
-#endif
-    versionString += QLatin1String( "</td></tr><tr>" );
-
-    // spatialite
-    versionString += QStringLiteral( "<td>%1</td><td colspan=\"3\">" ).arg( tr( "SpatiaLite version" ) );
-#ifdef HAVE_SPATIALITE
-    versionString += QStringLiteral( "%1</td>" ).arg( spatialite_version() );
-#else
-    versionString += tr( "No support" );
-#endif
-    versionString += QLatin1String( "</td></tr><tr>" );
-
-    // QWT
-    versionString += QStringLiteral( "<td>%1</td><td colspan=\"3\">%2</td>" ).arg( tr( "QWT version" ), QWT_VERSION_STR );
-    versionString += QLatin1String( "</tr><tr>" );
-
-    // QScintilla
-    versionString += QStringLiteral( "<td>%1</td><td colspan=\"3\">%2</td>" ).arg( tr( "QScintilla2 version" ), QSCINTILLA_VERSION_STR );
-    versionString += QLatin1String( "</tr><tr>" );
-
-    // Operating system
-    versionString += QStringLiteral( "<td>%1</td><td colspan=\"3\">%2</td>" ).arg( tr( "OS version" ), QSysInfo::prettyProductName() );
-    versionString += QLatin1String( "</tr><tr>" );
-
-#ifdef QGISDEBUG
-    versionString += QLatin1String( "</tr><tr>" );
-    versionString += QStringLiteral( "<td colspan=\"4\"><i>%1</i></td>" ).arg( tr( "This copy of QGIS writes debugging output." ) );
-    versionString += QLatin1String( "</tr><tr>" );
-#endif
-
-#ifdef WITH_BINDINGS
-    if ( mPythonUtils && mPythonUtils->isEnabled() )
-    {
-      versionString += QStringLiteral( "</tr><tr><td colspan=\"4\">%1</td>" ).arg( tr( "Active Python plugins" ) );
-      const QStringList activePlugins = mPythonUtils->listActivePlugins();
-      for ( const QString &plugin : activePlugins )
-      {
-        const QString version = mPythonUtils->getPluginMetadata( plugin, QStringLiteral( "version" ) );
-        versionString += QStringLiteral( "</tr><tr><td>%1</td><td colspan=\"3\">%2</td>" ).arg( plugin, version );
-      }
-    }
-#endif
-
-    versionString += QLatin1String( "</tr></table></div></body></html>" );
-
-    sAbt->setVersion( versionString );
-  }
-  sAbt->show();
-  sAbt->raise();
-  sAbt->activateWindow();
+  static NgsAboutDialog *about = new NgsAboutDialog (this);
+  about->exec();
 }
 
 void QgisApp::addLayerDefinition()
@@ -5952,7 +5771,7 @@
       meshLayer->loadDefaultMetadata( ok );
       break;
     }
-
+/*
     case QgsMapLayerType::VectorTileLayer:
     {
       bool ok = false;
@@ -5965,7 +5784,7 @@
 
       break;
     }
-
+*/
     case QgsMapLayerType::AnnotationLayer:
     case QgsMapLayerType::GroupLayer:
       break;
@@ -6007,17 +5826,17 @@
     }
   }
 }
-
+/*
 QgsVectorTileLayer *QgisApp::addVectorTileLayer( const QString &url, const QString &baseName )
 {
   return addVectorTileLayerPrivate( url, baseName );
 }
-
+*/
 QgsPointCloudLayer *QgisApp::addPointCloudLayer( const QString &url, const QString &baseName, const QString &providerKey )
 {
   return addPointCloudLayerPrivate( url, baseName, providerKey );
 }
-
+/*
 QgsVectorTileLayer *QgisApp::addVectorTileLayerPrivate( const QString &url, const QString &baseName, const bool guiWarning )
 {
   QgsCanvasRefreshBlocker refreshBlocker;
@@ -6055,7 +5874,7 @@
 
   return layer.release();
 }
-
+*/
 QgsPointCloudLayer *QgisApp::addPointCloudLayerPrivate( const QString &uri, const QString &baseName, const QString &providerKey, bool guiWarning )
 {
   QgsCanvasRefreshBlocker refreshBlocker;
@@ -7381,7 +7200,7 @@
   }
   mProjectLastModified = fullPath.lastModified();
 } // QgisApp::fileSaveAs
-
+/*
 void QgisApp::dxfExport()
 {
   QgsDxfExportDialog d;
@@ -7447,7 +7266,7 @@
   QgsDwgImportDialog d;
   d.exec();
 }
-
+*/
 void QgisApp::openLayerDefinition( const QString &path )
 {
   QString errorMessage;
@@ -7651,36 +7470,36 @@
     }
   }
 
-  if ( fileName.endsWith( QStringLiteral( ".mbtiles" ), Qt::CaseInsensitive ) )
-  {
-    QgsMbTiles reader( fileName );
-    if ( reader.open() )
-    {
-      if ( reader.metadataValue( "format" ) == QLatin1String( "pbf" ) )
-      {
-        // these are vector tiles
-        QUrlQuery uq;
-        uq.addQueryItem( QStringLiteral( "type" ), QStringLiteral( "mbtiles" ) );
-        uq.addQueryItem( QStringLiteral( "url" ), fileName );
-        const QgsVectorTileLayer::LayerOptions options( QgsProject::instance()->transformContext() );
-        std::unique_ptr<QgsVectorTileLayer> vtLayer( new QgsVectorTileLayer( uq.toString(), fileInfo.completeBaseName(), options ) );
-        if ( vtLayer->isValid() )
-        {
-          QgsProject::instance()->addMapLayer( vtLayer.release() );
-          return true;
-        }
-      }
-      else // raster tiles
-      {
-        // prefer to use WMS provider's implementation to open MBTiles rasters
-        QUrlQuery uq;
-        uq.addQueryItem( QStringLiteral( "type" ), QStringLiteral( "mbtiles" ) );
-        uq.addQueryItem( QStringLiteral( "url" ), QUrl::fromLocalFile( fileName ).toString() );
-        if ( addRasterLayer( uq.toString(), fileInfo.completeBaseName(), QStringLiteral( "wms" ) ) )
-          return true;
-      }
-    }
-  }
+//   if ( fileName.endsWith( QStringLiteral( ".mbtiles" ), Qt::CaseInsensitive ) )
+//   {
+//     QgsMbTiles reader( fileName );
+//     if ( reader.open() )
+//     {
+//       if ( reader.metadataValue( "format" ) == QLatin1String( "pbf" ) )
+//       {
+//         // these are vector tiles
+//         QUrlQuery uq;
+//         uq.addQueryItem( QStringLiteral( "type" ), QStringLiteral( "mbtiles" ) );
+//         uq.addQueryItem( QStringLiteral( "url" ), fileName );
+//         const QgsVectorTileLayer::LayerOptions options( QgsProject::instance()->transformContext() );
+//         std::unique_ptr<QgsVectorTileLayer> vtLayer( new QgsVectorTileLayer( uq.toString(), fileInfo.completeBaseName(), options ) );
+//         if ( vtLayer->isValid() )
+//         {
+//           QgsProject::instance()->addMapLayer( vtLayer.release() );
+//           return true;
+//         }
+//       }
+//       else // raster tiles
+//       {
+//         // prefer to use WMS provider's implementation to open MBTiles rasters
+//         QUrlQuery uq;
+//         uq.addQueryItem( QStringLiteral( "type" ), QStringLiteral( "mbtiles" ) );
+//         uq.addQueryItem( QStringLiteral( "url" ), QUrl::fromLocalFile( fileName ).toString() );
+//         if ( addRasterLayer( uq.toString(), fileInfo.completeBaseName(), QStringLiteral( "wms" ) ) )
+//           return true;
+//       }
+//     }
+//   }
 
   QList< QgsProviderSublayerModel::NonLayerItem > nonLayerItems;
   if ( QgsProjectStorage *ps = QgsApplication::projectStorageRegistry()->projectStorageFromUri( fileName ) )
@@ -13321,7 +13140,7 @@
     mMagnifierWidget->setDefaultFactor( factor );
     mMagnifierWidget->updateMagnification( factor );
 
-    mWelcomePage->updateNewsFeedVisibility();
+    // mWelcomePage->updateNewsFeedVisibility();
   }
 }
 
@@ -16163,7 +15982,7 @@
     }
 
     break;
-
+/*
     case QgsMapLayerType::VectorTileLayer:
       mActionLocalHistogramStretch->setEnabled( false );
       mActionFullHistogramStretch->setEnabled( false );
@@ -16233,7 +16052,7 @@
       enableDigitizeTechniqueActions( false );
       enableMeshEditingTools( false );
       break;
-
+*/
     case QgsMapLayerType::PointCloudLayer:
       mActionLocalHistogramStretch->setEnabled( false );
       mActionFullHistogramStretch->setEnabled( false );
@@ -17169,7 +16988,7 @@
       delete vectorLayerPropertiesDialog; // delete since dialog cannot be reused without updating code
       break;
     }
-
+/*
     case QgsMapLayerType::VectorTileLayer:
     {
       QgsVectorTileLayerProperties vectorTileLayerPropertiesDialog( qobject_cast<QgsVectorTileLayer *>( mapLayer ), mMapCanvas, visibleMessageBar(), this );
@@ -17187,7 +17006,7 @@
       mMapStyleWidget->blockUpdates( false ); // delete since dialog cannot be reused without updating code
       break;
     }
-
+*/
     case QgsMapLayerType::PointCloudLayer:
     {
       QgsPointCloudLayerProperties pointCloudLayerPropertiesDialog( qobject_cast<QgsPointCloudLayer *>( mapLayer ), mMapCanvas, visibleMessageBar(), this );
