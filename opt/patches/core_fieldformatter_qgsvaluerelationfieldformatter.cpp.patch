--- a/src/core/fieldformatter/qgsvaluerelationfieldformatter.cpp	2022-02-18 15:06:10.000000000 +0300
+++ b/src/core/fieldformatter/qgsvaluerelationfieldformatter.cpp	2022-04-07 00:39:43.000000000 +0300
@@ -25,8 +25,9 @@
 #include "qgspostgresstringutils.h"
 #include "qgsmessagelog.h"
 
-#include <nlohmann/json.hpp>
-using namespace nlohmann;
+// #include <nlohmann/json.hpp>
+// using namespace nlohmann;
+#include "qgsjsonutils.h"
 
 #include <QSettings>
 
@@ -246,29 +247,30 @@
       }
       else if ( newVal.toString().trimmed().startsWith( '[' ) )
       {
+          valuesList = QgsJsonUtils::parseArray(newVal.toString());
         //fallback, in case it's a json array
-        try
-        {
-          for ( auto &element : json::parse( newVal.toString().toStdString() ) )
-          {
-            if ( element.is_number_integer() )
-            {
-              valuesList.push_back( element.get<int>() );
-            }
-            else if ( element.is_number_unsigned() )
-            {
-              valuesList.push_back( element.get<unsigned>() );
-            }
-            else if ( element.is_string() )
-            {
-              valuesList.push_back( QString::fromStdString( element.get<std::string>() ) );
-            }
-          }
-        }
-        catch ( json::parse_error &ex )
-        {
-          QgsMessageLog::logMessage( QObject::tr( "Cannot parse JSON like string '%1' Error: %2" ).arg( newVal.toString(), ex.what() ) );
-        }
+        // try
+        // {
+        //   for ( auto &element : json::parse( newVal.toString().toStdString() ) )
+        //   {
+        //     if ( element.is_number_integer() )
+        //     {
+        //       valuesList.push_back( element.get<int>() );
+        //     }
+        //     else if ( element.is_number_unsigned() )
+        //     {
+        //       valuesList.push_back( element.get<unsigned>() );
+        //     }
+        //     else if ( element.is_string() )
+        //     {
+        //       valuesList.push_back( QString::fromStdString( element.get<std::string>() ) );
+        //     }
+        //   }
+        // }
+        // catch ( json::parse_error &ex )
+        // {
+        //   QgsMessageLog::logMessage( QObject::tr( "Cannot parse JSON like string '%1' Error: %2" ).arg( newVal.toString(), ex.what() ) );
+        // }
       }
     }
     else if ( value.type() == QVariant::List )
