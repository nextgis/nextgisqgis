--- a/src/providers/wfs/qgsoapifutils.cpp	2022-02-18 15:06:10.000000000 +0300
+++ b/src/providers/wfs/qgsoapifutils.cpp	2022-04-20 02:30:28.994198900 +0300
@@ -19,56 +19,44 @@
 
 std::vector<QgsOAPIFJson::Link> QgsOAPIFJson::parseLinks( const json &jParent )
 {
-  std::vector<Link> links;
-  if ( jParent.is_object() && jParent.contains( "links" ) )
-  {
-    const auto jLinks = jParent["links"];
-    if ( jLinks.is_array() )
+    std::vector<Link> links;
+    if ( QgsJsonUtils::is_object(jParent) )
     {
-      for ( const auto &jLink : jLinks )
-      {
-        if ( jLink.is_object() &&
-             jLink.contains( "href" ) &&
-             jLink.contains( "rel" ) )
+        const auto jLinks = jParent["links"];
+        if ( QgsJsonUtils::is_array(jLinks) )
         {
-          const auto href = jLink["href"];
-          const auto rel = jLink["rel"];
-          if ( href.is_string() && rel.is_string() )
-          {
-            Link link;
-            link.href = QString::fromStdString( href.get<std::string>() );
-            link.rel = QString::fromStdString( rel.get<std::string>() );
-            if ( jLink.contains( "type" ) )
+            for ( const auto &jLink : jLinks.ToArray() )
             {
-              const auto type = jLink["type"];
-              if ( type.is_string() )
-              {
-                link.type = QString::fromStdString( type.get<std::string>() );
-              }
-            }
-            if ( jLink.contains( "title" ) )
-            {
-              const auto title = jLink["title"];
-              if ( title.is_string() )
-              {
-                link.title = QString::fromStdString( title.get<std::string>() );
-              }
-            }
-            if ( jLink.contains( "length" ) )
-            {
-              const auto length = jLink["length"];
-              if ( length.is_number_integer() )
-              {
-                link.length = length.get<qint64>();
-              }
+                if ( QgsJsonUtils::is_object(jLink) )
+                {
+                    const auto href = jLink["href"];
+                    const auto rel = jLink["rel"];
+          
+                    Link link;
+                    link.href = QString::fromStdString( href.ToString() );
+                    link.rel = QString::fromStdString( rel.ToString() );
+            
+                    const auto type = jLink["type"];
+                    if ( type.IsValid() )
+                    {
+                        link.type = QString::fromStdString( type.ToString() );
+                    }
+
+            
+                    const auto title = jLink["title"];
+                    link.title = QString::fromStdString( title.ToString() );
+
+                    const auto length = jLink["length"];
+                    if ( QgsJsonUtils::is_number_integer(length) )
+                    {
+                        link.length = length.ToLong();
+                    }
+                    links.push_back( link );
+                }
             }
-            links.push_back( link );
-          }
         }
-      }
     }
-  }
-  return links;
+    return links;
 }
 
 QString QgsOAPIFJson::findLink( const std::vector<QgsOAPIFJson::Link> &links,
