--- a/src/providers/spatialite/qgsspatialiteprovider.cpp	2022-02-18 15:06:10.000000000 +0300
+++ b/src/providers/spatialite/qgsspatialiteprovider.cpp	2022-04-07 00:39:45.000000000 +0300
@@ -43,8 +43,9 @@
 #include <QDir>
 #include <QRegularExpression>
 
-#include <nlohmann/json.hpp>
-using namespace nlohmann;
+// #include <nlohmann/json.hpp>
+// using namespace nlohmann;
+#include "qgsjsonutils.h"
 
 
 const QString QgsSpatiaLiteProvider::SPATIALITE_KEY = QStringLiteral( "spatialite" );
@@ -4675,25 +4676,18 @@
         {
           // binding an array value, parse JSON
           QString jRepr;
-          try
+          const auto jObj = QgsJsonUtils::jsonFromVariant( val );
+          if ( !QgsJsonUtils::is_array(jObj) )
           {
-            const auto jObj = QgsJsonUtils::jsonFromVariant( val );
-            if ( ! jObj.is_array() )
-            {
-              throw json::parse_error::create( 0, 0, tr( "JSON value must be an array" ).toStdString() );
-            }
-            jRepr = QString::fromStdString( jObj.dump( ) );
-            sql += QStringLiteral( "%1=%2" ).arg( QgsSqliteUtils::quotedIdentifier( fld.name() ),  QgsSqliteUtils::quotedString( jRepr ) );
-          }
-          catch ( json::exception &ex )
-          {
-            const auto errM { tr( "Field type is JSON but the value cannot be converted to JSON array: %1" ).arg( ex.what() ) };
+            const auto errM { tr( "Field type is JSON but the value cannot be converted to JSON array" ) };
             auto msgPtr { static_cast<char *>( sqlite3_malloc( errM.length() + 1 ) ) };
             strcpy( static_cast<char *>( msgPtr ), errM.toStdString().c_str() );
             errMsg = msgPtr;
             handleError( jRepr, errMsg, savepointId );
             return false;
           }
+          jRepr = QgsJsonUtils::dump(jObj);
+          sql += QStringLiteral( "%1=%2" ).arg( QgsSqliteUtils::quotedIdentifier( fld.name() ),  QgsSqliteUtils::quotedString( jRepr ) );
         }
         else if ( type == QVariant::ByteArray )
         {
